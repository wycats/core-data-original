import { module, test } from "qunit";
import Database from "core-data/database";
import { schema } from "core-data/schema";
import faker from "faker";
module("modelling");
test("select", assert => {
    let db = populate();
    let question = db.first("question");
    let { upvotes, downvotes } = question.select("upvotes", "downvotes");
    assert.ok(typeof upvotes === "number", "upvotes is a number");
    assert.ok(typeof downvotes === "number", "downvotes is a number");
});
test("relationships", assert => {
    let db = populate();
    let question = db.first("question");
    let count = db
        .all("answer")
        .where({ question })
        .count();
    assert.equal(typeof count, "number", "count is a number");
    let questions = db.all("question");
    let counts = [];
    for (let question of questions) {
        let count = db
            .all("answer")
            .where({ question })
            .count();
        counts.push(count);
    }
    assert.ok(counts.some(count => count > 0), "Some of the questions have answers");
});
const DB = Database.create();
DB.define("question", {
    id: schema.id(),
    title: "string",
    body: "string",
    by: schema.one("user"),
    selectedAnswer: schema.optional(schema.one("answer")),
    upvotes: "number",
    downvotes: "number",
    rank: "number"
});
DB.define("answer", {
    id: schema.id(),
    by: schema.one("user"),
    question: schema.one("question"),
    upvotes: "number",
    downvotes: "number"
});
DB.define("user", {
    id: schema.id(),
    username: "string"
});
function populate() {
    let db = DB.empty();
    let users = db.populate("user", {
        username: faker.internet.userName
    }, 10);
    let questions = db.populate("question", {
        title: faker.lorem.sentence,
        body: faker.lorem.paragraphs,
        selectedAnswer: faker.random.boolean,
        by: () => faker.random.arrayElement(users),
        rank: () => faker.random.number({ min: 0, max: 10 }),
        upvotes: () => faker.random.number({ min: 0, max: 1000 }),
        downvotes: () => faker.random.number({ min: 0, max: 1000 })
    }, 100);
    db.populate("answer", {
        by: () => faker.random.arrayElement(users),
        question: () => faker.random.arrayElement(questions),
        upvotes: () => faker.random.number({ min: 0, max: 1000 }),
        downvotes: () => faker.random.number({ min: 0, max: 1000 })
    }, 1000);
    return db;
}
// test("basic", assert => {
//   let db = setup();
// });
// function setup() {
//   let db = new Database();
//   let cars = DB.define(
//     new Sheet("cars", {
//       id: "id",
//       make: "scalar",
//       model: "scalar"
//     })
//   );
//   let customers = DB.define(
//     new Sheet("customers", {
//       id: "id",
//       name: "scalar"
//     })
//   );
//   let offers = DB.define(
//     new Sheet("offers", {
//       buyer: "reference",
//       seller: "reference",
//       item: "reference",
//       amount: "scalar"
//     })
//   );
//   let pzuraq = customers.insert({
//     id: "1",
//     name: "Chris Garrett"
//   });
//   let wycats = customers.insert({
//     id: "2",
//     name: "Yehuda Katz"
//   });
//   let leah = customers.insert({
//     id: "3",
//     name: "Leah Silber"
//   });
//   let pinto = cars.insert({
//     id: "1",
//     make: "Ford",
//     model: "Pinto"
//   });
//   offers.insert({
//     id: "1",
//     buyer: wycats,
//     seller: pzuraq,
//     item: pinto,
//     amount: 500
//   });
//   offers.insert({
//     id: "2",
//     buyer: leah,
//     seller: pzuraq,
//     item: pinto,
//     amount: 750
//   });
//   return db;
// }
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWxsaW5nLXRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtb2RlbGxpbmctdGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUNyQyxPQUFPLFFBQVEsTUFBTSxvQkFBb0IsQ0FBQztBQUMxQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDMUMsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBRzFCLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUVwQixJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFO0lBQ3RCLElBQUksRUFBRSxHQUFHLFFBQVEsRUFBRSxDQUFDO0lBRXBCLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFcEMsSUFBSSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxXQUFXLENBR2xFLENBQUM7SUFFRixNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sT0FBTyxLQUFLLFFBQVEsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0lBQzlELE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxTQUFTLEtBQUssUUFBUSxFQUFFLHVCQUF1QixDQUFDLENBQUM7QUFDcEUsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxFQUFFO0lBQzdCLElBQUksRUFBRSxHQUFHLFFBQVEsRUFBRSxDQUFDO0lBRXBCLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFcEMsSUFBSSxLQUFLLEdBQUcsRUFBRTtTQUNYLEdBQUcsQ0FBQyxRQUFRLENBQUM7U0FDYixLQUFLLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQztTQUNuQixL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LFNBQVM7QUFDVCxPQUFPO0FBRVAsb0NBQW9DO0FBQ3BDLGVBQWU7QUFDZiw0QkFBNEI7QUFDNUIsUUFBUTtBQUVSLG9DQUFvQztBQUNwQyxlQUFlO0FBQ2YsMEJBQTBCO0FBQzFCLFFBQVE7QUFFUixrQ0FBa0M7QUFDbEMsZUFBZTtBQUNmLDBCQUEwQjtBQUMxQixRQUFRO0FBRVIsOEJBQThCO0FBQzlCLGVBQWU7QUFDZixvQkFBb0I7QUFDcEIscUJBQXFCO0FBQ3JCLFFBQVE7QUFFUixvQkFBb0I7QUFDcEIsZUFBZTtBQUNmLHFCQUFxQjtBQUNyQixzQkFBc0I7QUFDdEIsbUJBQW1CO0FBQ25CLGtCQUFrQjtBQUNsQixRQUFRO0FBRVIsb0JBQW9CO0FBQ3BCLGVBQWU7QUFDZixtQkFBbUI7QUFDbkIsc0JBQXNCO0FBQ3RCLG1CQUFtQjtBQUNuQixrQkFBa0I7QUFDbEIsUUFBUTtBQUVSLGVBQWU7QUFDZixJQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbW9kdWxlLCB0ZXN0IH0gZnJvbSBcInF1bml0XCI7XG5pbXBvcnQgRGF0YWJhc2UgZnJvbSBcImNvcmUtZGF0YS9kYXRhYmFzZVwiO1xuaW1wb3J0IHsgc2NoZW1hIH0gZnJvbSBcImNvcmUtZGF0YS9zY2hlbWFcIjtcbmltcG9ydCBmYWtlciBmcm9tIFwiZmFrZXJcIjtcbmltcG9ydCB7IFFhbmRhRGIsIFFhbmRhU2NoZW1hIH0gZnJvbSBcImR1bW15L3NlcnZpY2VzL2RiXCI7XG5cbm1vZHVsZShcIm1vZGVsbGluZ1wiKTtcblxudGVzdChcInNlbGVjdFwiLCBhc3NlcnQgPT4ge1xuICBsZXQgZGIgPSBwb3B1bGF0ZSgpO1xuXG4gIGxldCBxdWVzdGlvbiA9IGRiLmZpcnN0KFwicXVlc3Rpb25cIik7XG5cbiAgbGV0IHsgdXB2b3RlcywgZG93bnZvdGVzIH0gPSBxdWVzdGlvbi5zZWxlY3QoXCJ1cHZvdGVzXCIsIFwiZG93bnZvdGVzXCIpIGFzIHtcbiAgICB1cHZvdGVzOiBudW1iZXI7XG4gICAgZG93bnZvdGVzOiBudW1iZXI7XG4gIH07XG5cbiAgYXNzZXJ0Lm9rKHR5cGVvZiB1cHZvdGVzID09PSBcIm51bWJlclwiLCBcInVwdm90ZXMgaXMgYSBudW1iZXJcIik7XG4gIGFzc2VydC5vayh0eXBlb2YgZG93bnZvdGVzID09PSBcIm51bWJlclwiLCBcImRvd252b3RlcyBpcyBhIG51bWJlclwiKTtcbn0pO1xuXG50ZXN0KFwicmVsYXRpb25zaGlwc1wiLCBhc3NlcnQgPT4ge1xuICBsZXQgZGIgPSBwb3B1bGF0ZSgpO1xuXG4gIGxldCBxdWVzdGlvbiA9IGRiLmZpcnN0KFwicXVlc3Rpb25cIik7XG5cbiAgbGV0IGNvdW50ID0gZGJcbiAgICAuYWxsKFwiYW5zd2VyXCIpXG4gICAgLndoZXJlKHsgcXVlc3Rpb24gfSlcbiAgICAuY291bnQoKTtcblxuICBhc3NlcnQuZXF1YWwodHlwZW9mIGNvdW50LCBcIm51bWJlclwiLCBcImNvdW50IGlzIGEgbnVtYmVyXCIpO1xuXG4gIGxldCBxdWVzdGlvbnMgPSBkYi5hbGwoXCJxdWVzdGlvblwiKTtcbiAgbGV0IGNvdW50cyA9IFtdO1xuXG4gIGZvciAobGV0IHF1ZXN0aW9uIG9mIHF1ZXN0aW9ucykge1xuICAgIGxldCBjb3VudCA9IGRiXG4gICAgICAuYWxsKFwiYW5zd2VyXCIpXG4gICAgICAud2hlcmUoeyBxdWVzdGlvbiB9KVxuICAgICAgLmNvdW50KCk7XG4gICAgY291bnRzLnB1c2goY291bnQpO1xuICB9XG5cbiAgYXNzZXJ0Lm9rKFxuICAgIGNvdW50cy5zb21lKGNvdW50ID0+IGNvdW50ID4gMCksXG4gICAgXCJTb21lIG9mIHRoZSBxdWVzdGlvbnMgaGF2ZSBhbnN3ZXJzXCJcbiAgKTtcbn0pO1xuXG5jb25zdCBEQiA9IERhdGFiYXNlLmNyZWF0ZTxRYW5kYVNjaGVtYT4oKTtcblxuREIuZGVmaW5lKFwicXVlc3Rpb25cIiwge1xuICBpZDogc2NoZW1hLmlkKCksXG4gIHRpdGxlOiBcInN0cmluZ1wiLFxuICBib2R5OiBcInN0cmluZ1wiLFxuICBieTogc2NoZW1hLm9uZShcInVzZXJcIiksXG4gIHNlbGVjdGVkQW5zd2VyOiBzY2hlbWEub3B0aW9uYWwoc2NoZW1hLm9uZShcImFuc3dlclwiKSksXG4gIHVwdm90ZXM6IFwibnVtYmVyXCIsXG4gIGRvd252b3RlczogXCJudW1iZXJcIixcbiAgcmFuazogXCJudW1iZXJcIlxufSk7XG5cbkRCLmRlZmluZShcImFuc3dlclwiLCB7XG4gIGlkOiBzY2hlbWEuaWQoKSxcbiAgYnk6IHNjaGVtYS5vbmUoXCJ1c2VyXCIpLFxuICBxdWVzdGlvbjogc2NoZW1hLm9uZShcInF1ZXN0aW9uXCIpLFxuICB1cHZvdGVzOiBcIm51bWJlclwiLFxuICBkb3dudm90ZXM6IFwibnVtYmVyXCJcbn0pO1xuXG5EQi5kZWZpbmUoXCJ1c2VyXCIsIHtcbiAgaWQ6IHNjaGVtYS5pZCgpLFxuICB1c2VybmFtZTogXCJzdHJpbmdcIlxufSk7XG5cbmZ1bmN0aW9uIHBvcHVsYXRlKCk6IFFhbmRhRGIge1xuICBsZXQgZGIgPSBEQi5lbXB0eSgpO1xuXG4gIGxldCB1c2VycyA9IGRiLnBvcHVsYXRlKFxuICAgIFwidXNlclwiLFxuICAgIHtcbiAgICAgIHVzZXJuYW1lOiBmYWtlci5pbnRlcm5ldC51c2VyTmFtZVxuICAgIH0sXG4gICAgMTBcbiAgKTtcblxuICBsZXQgcXVlc3Rpb25zID0gZGIucG9wdWxhdGUoXG4gICAgXCJxdWVzdGlvblwiLFxuICAgIHtcbiAgICAgIHRpdGxlOiBmYWtlci5sb3JlbS5zZW50ZW5jZSxcbiAgICAgIGJvZHk6IGZha2VyLmxvcmVtLnBhcmFncmFwaHMsXG4gICAgICBzZWxlY3RlZEFuc3dlcjogZmFrZXIucmFuZG9tLmJvb2xlYW4sXG4gICAgICBieTogKCkgPT4gZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudCh1c2VycyksXG4gICAgICByYW5rOiAoKSA9PiBmYWtlci5yYW5kb20ubnVtYmVyKHsgbWluOiAwLCBtYXg6IDEwIH0pLFxuICAgICAgdXB2b3RlczogKCkgPT4gZmFrZXIucmFuZG9tLm51bWJlcih7IG1pbjogMCwgbWF4OiAxMDAwIH0pLFxuICAgICAgZG93bnZvdGVzOiAoKSA9PiBmYWtlci5yYW5kb20ubnVtYmVyKHsgbWluOiAwLCBtYXg6IDEwMDAgfSlcbiAgICB9LFxuICAgIDEwMFxuICApO1xuXG4gIGRiLnBvcHVsYXRlKFxuICAgIFwiYW5zd2VyXCIsXG4gICAge1xuICAgICAgYnk6ICgpID0+IGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQodXNlcnMpLFxuICAgICAgcXVlc3Rpb246ICgpID0+IGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQocXVlc3Rpb25zKSxcbiAgICAgIHVwdm90ZXM6ICgpID0+IGZha2VyLnJhbmRvbS5udW1iZXIoeyBtaW46IDAsIG1heDogMTAwMCB9KSxcbiAgICAgIGRvd252b3RlczogKCkgPT4gZmFrZXIucmFuZG9tLm51bWJlcih7IG1pbjogMCwgbWF4OiAxMDAwIH0pXG4gICAgfSxcbiAgICAxMDAwXG4gICk7XG5cbiAgcmV0dXJuIGRiO1xufVxuXG4vLyB0ZXN0KFwiYmFzaWNcIiwgYXNzZXJ0ID0+IHtcbi8vICAgbGV0IGRiID0gc2V0dXAoKTtcbi8vIH0pO1xuXG4vLyBmdW5jdGlvbiBzZXR1cCgpIHtcbi8vICAgbGV0IGRiID0gbmV3IERhdGFiYXNlKCk7XG5cbi8vICAgbGV0IGNhcnMgPSBEQi5kZWZpbmUoXG4vLyAgICAgbmV3IFNoZWV0KFwiY2Fyc1wiLCB7XG4vLyAgICAgICBpZDogXCJpZFwiLFxuLy8gICAgICAgbWFrZTogXCJzY2FsYXJcIixcbi8vICAgICAgIG1vZGVsOiBcInNjYWxhclwiXG4vLyAgICAgfSlcbi8vICAgKTtcblxuLy8gICBsZXQgY3VzdG9tZXJzID0gREIuZGVmaW5lKFxuLy8gICAgIG5ldyBTaGVldChcImN1c3RvbWVyc1wiLCB7XG4vLyAgICAgICBpZDogXCJpZFwiLFxuLy8gICAgICAgbmFtZTogXCJzY2FsYXJcIlxuLy8gICAgIH0pXG4vLyAgICk7XG5cbi8vICAgbGV0IG9mZmVycyA9IERCLmRlZmluZShcbi8vICAgICBuZXcgU2hlZXQoXCJvZmZlcnNcIiwge1xuLy8gICAgICAgYnV5ZXI6IFwicmVmZXJlbmNlXCIsXG4vLyAgICAgICBzZWxsZXI6IFwicmVmZXJlbmNlXCIsXG4vLyAgICAgICBpdGVtOiBcInJlZmVyZW5jZVwiLFxuLy8gICAgICAgYW1vdW50OiBcInNjYWxhclwiXG4vLyAgICAgfSlcbi8vICAgKTtcblxuLy8gICBsZXQgcHp1cmFxID0gY3VzdG9tZXJzLmluc2VydCh7XG4vLyAgICAgaWQ6IFwiMVwiLFxuLy8gICAgIG5hbWU6IFwiQ2hyaXMgR2FycmV0dFwiXG4vLyAgIH0pO1xuXG4vLyAgIGxldCB3eWNhdHMgPSBjdXN0b21lcnMuaW5zZXJ0KHtcbi8vICAgICBpZDogXCIyXCIsXG4vLyAgICAgbmFtZTogXCJZZWh1ZGEgS2F0elwiXG4vLyAgIH0pO1xuXG4vLyAgIGxldCBsZWFoID0gY3VzdG9tZXJzLmluc2VydCh7XG4vLyAgICAgaWQ6IFwiM1wiLFxuLy8gICAgIG5hbWU6IFwiTGVhaCBTaWxiZXJcIlxuLy8gICB9KTtcblxuLy8gICBsZXQgcGludG8gPSBjYXJzLmluc2VydCh7XG4vLyAgICAgaWQ6IFwiMVwiLFxuLy8gICAgIG1ha2U6IFwiRm9yZFwiLFxuLy8gICAgIG1vZGVsOiBcIlBpbnRvXCJcbi8vICAgfSk7XG5cbi8vICAgb2ZmZXJzLmluc2VydCh7XG4vLyAgICAgaWQ6IFwiMVwiLFxuLy8gICAgIGJ1eWVyOiB3eWNhdHMsXG4vLyAgICAgc2VsbGVyOiBwenVyYXEsXG4vLyAgICAgaXRlbTogcGludG8sXG4vLyAgICAgYW1vdW50OiA1MDBcbi8vICAgfSk7XG5cbi8vICAgb2ZmZXJzLmluc2VydCh7XG4vLyAgICAgaWQ6IFwiMlwiLFxuLy8gICAgIGJ1eWVyOiBsZWFoLFxuLy8gICAgIHNlbGxlcjogcHp1cmFxLFxuLy8gICAgIGl0ZW06IHBpbnRvLFxuLy8gICAgIGFtb3VudDogNzUwXG4vLyAgIH0pO1xuXG4vLyAgIHJldHVybiBkYjtcbi8vIH1cbiJdfQ==