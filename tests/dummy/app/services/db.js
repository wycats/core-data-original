import Service from "@ember/service";
import Database from "core-data/database";
import { schema } from "core-data/schema";
import { getOwner } from "@ember/application";
export default class DbService extends Service {
    constructor(owner) {
        super(owner);
        this.state = Database.create();
        let db = this.state;
        db.define("question", {
            id: schema.id(),
            title: "string",
            body: "string",
            by: schema.one("user"),
            selectedAnswer: schema.optional(schema.one("answer")),
            upvotes: "number",
            downvotes: "number",
            rank: "number"
        });
        db.define("answer", {
            id: schema.id(),
            by: schema.one("user"),
            question: schema.one("question"),
            body: "string",
            upvotes: "number",
            downvotes: "number"
        });
        db.define("user", {
            id: schema.id(),
            username: "string"
        });
    }
}
export const use = (target, name) => {
    Object.defineProperty(target, name, {
        enumerable: true,
        configurable: true,
        get() {
            let owner = getOwner(this);
            let service = owner.lookup(`service:${name}`);
            return service.state;
        }
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE9BQU8sTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLFFBQW1CLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQWlDOUMsTUFBTSxDQUFDLE9BQU8sT0FBTyxTQUFVLFNBQVEsT0FBTztJQUc1QyxZQUFZLEtBQWE7UUFDdkIsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBSE4sVUFBSyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQWUsQ0FBQztRQUs5QyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBRXBCLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFO1lBQ3BCLEVBQUUsRUFBRSxNQUFNLENBQUMsRUFBRSxFQUFFO1lBQ2YsS0FBSyxFQUFFLFFBQVE7WUFDZixJQUFJLEVBQUUsUUFBUTtZQUNkLEVBQUUsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztZQUN0QixjQUFjLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3JELE9BQU8sRUFBRSxRQUFRO1lBQ2pCLFNBQVMsRUFBRSxRQUFRO1lBQ25CLElBQUksRUFBRSxRQUFRO1NBQ2YsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDbEIsRUFBRSxFQUFFLE1BQU0sQ0FBQyxFQUFFLEVBQUU7WUFDZixFQUFFLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7WUFDdEIsUUFBUSxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDO1lBQ2hDLElBQUksRUFBRSxRQUFRO1lBQ2QsT0FBTyxFQUFFLFFBQVE7WUFDakIsU0FBUyxFQUFFLFFBQVE7U0FDcEIsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7WUFDaEIsRUFBRSxFQUFFLE1BQU0sQ0FBQyxFQUFFLEVBQUU7WUFDZixRQUFRLEVBQUUsUUFBUTtTQUNuQixDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFXLEVBQUUsSUFBWSxFQUFFLEVBQUU7SUFDL0MsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFO1FBQ2xDLFVBQVUsRUFBRSxJQUFJO1FBQ2hCLFlBQVksRUFBRSxJQUFJO1FBQ2xCLEdBQUc7WUFDRCxJQUFJLEtBQUssR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDM0IsSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDLENBQUM7WUFDOUMsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQ3ZCLENBQUM7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU2VydmljZSBmcm9tIFwiQGVtYmVyL3NlcnZpY2VcIjtcbmltcG9ydCBEYXRhYmFzZSwgeyBUeXBlcyB9IGZyb20gXCJjb3JlLWRhdGEvZGF0YWJhc2VcIjtcbmltcG9ydCB7IHNjaGVtYSB9IGZyb20gXCJjb3JlLWRhdGEvc2NoZW1hXCI7XG5pbXBvcnQgeyBnZXRPd25lciB9IGZyb20gXCJAZW1iZXIvYXBwbGljYXRpb25cIjtcbmltcG9ydCB7IFR5cGUsIEVudGl0eSB9IGZyb20gXCJjb3JlLWRhdGEvdGFibGVcIjtcblxuZXhwb3J0IGludGVyZmFjZSBRdWVzdGlvbiBleHRlbmRzIFR5cGU8UWFuZGFTY2hlbWE+IHtcbiAgdGl0bGU6IHN0cmluZztcbiAgYm9keTogc3RyaW5nO1xuICBieTogRW50aXR5PFwidXNlclwiPjtcbiAgc2VsZWN0ZWRBbnN3ZXI6IEVudGl0eTxcImFuc3dlclwiPiB8IG51bGw7XG4gIHVwdm90ZXM6IG51bWJlcjtcbiAgZG93bnZvdGVzOiBudW1iZXI7XG4gIHJhbms6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBbnN3ZXIgZXh0ZW5kcyBUeXBlPFFhbmRhU2NoZW1hPiB7XG4gIHVzZXI6IEVudGl0eTxcInVzZXJcIj47XG4gIHF1ZXN0aW9uOiBFbnRpdHk8XCJxdWVzdGlvblwiPjtcbiAgYm9keTogc3RyaW5nO1xuICB1cHZvdGVzOiBudW1iZXI7XG4gIGRvd252b3RlczogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZXIgZXh0ZW5kcyBUeXBlPFFhbmRhU2NoZW1hPiB7XG4gIHVzZXJuYW1lOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUWFuZGFTY2hlbWEgZXh0ZW5kcyBUeXBlcyB7XG4gIHF1ZXN0aW9uOiBRdWVzdGlvbjtcbiAgYW5zd2VyOiBBbnN3ZXI7XG4gIHVzZXI6IFVzZXI7XG59XG5cbmV4cG9ydCB0eXBlIFFhbmRhRGIgPSBEYXRhYmFzZTxRYW5kYVNjaGVtYT47XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERiU2VydmljZSBleHRlbmRzIFNlcnZpY2Uge1xuICByZWFkb25seSBzdGF0ZSA9IERhdGFiYXNlLmNyZWF0ZTxRYW5kYVNjaGVtYT4oKTtcblxuICBjb25zdHJ1Y3Rvcihvd25lcjogb2JqZWN0KSB7XG4gICAgc3VwZXIob3duZXIpO1xuXG4gICAgbGV0IGRiID0gdGhpcy5zdGF0ZTtcblxuICAgIGRiLmRlZmluZShcInF1ZXN0aW9uXCIsIHtcbiAgICAgIGlkOiBzY2hlbWEuaWQoKSxcbiAgICAgIHRpdGxlOiBcInN0cmluZ1wiLFxuICAgICAgYm9keTogXCJzdHJpbmdcIixcbiAgICAgIGJ5OiBzY2hlbWEub25lKFwidXNlclwiKSxcbiAgICAgIHNlbGVjdGVkQW5zd2VyOiBzY2hlbWEub3B0aW9uYWwoc2NoZW1hLm9uZShcImFuc3dlclwiKSksXG4gICAgICB1cHZvdGVzOiBcIm51bWJlclwiLFxuICAgICAgZG93bnZvdGVzOiBcIm51bWJlclwiLFxuICAgICAgcmFuazogXCJudW1iZXJcIlxuICAgIH0pO1xuXG4gICAgZGIuZGVmaW5lKFwiYW5zd2VyXCIsIHtcbiAgICAgIGlkOiBzY2hlbWEuaWQoKSxcbiAgICAgIGJ5OiBzY2hlbWEub25lKFwidXNlclwiKSxcbiAgICAgIHF1ZXN0aW9uOiBzY2hlbWEub25lKFwicXVlc3Rpb25cIiksXG4gICAgICBib2R5OiBcInN0cmluZ1wiLFxuICAgICAgdXB2b3RlczogXCJudW1iZXJcIixcbiAgICAgIGRvd252b3RlczogXCJudW1iZXJcIlxuICAgIH0pO1xuXG4gICAgZGIuZGVmaW5lKFwidXNlclwiLCB7XG4gICAgICBpZDogc2NoZW1hLmlkKCksXG4gICAgICB1c2VybmFtZTogXCJzdHJpbmdcIlxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCB1c2UgPSAodGFyZ2V0OiBhbnksIG5hbWU6IHN0cmluZykgPT4ge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBuYW1lLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0KCkge1xuICAgICAgbGV0IG93bmVyID0gZ2V0T3duZXIodGhpcyk7XG4gICAgICBsZXQgc2VydmljZSA9IG93bmVyLmxvb2t1cChgc2VydmljZToke25hbWV9YCk7XG4gICAgICByZXR1cm4gc2VydmljZS5zdGF0ZTtcbiAgICB9XG4gIH0pO1xufTtcbiJdfQ==