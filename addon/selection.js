import { FIND } from "./database";
import { FILTER, normalizeDataType } from "./table";
export const ENTITY = Symbol("ENTITY");
export const INTERNAL_ROW = Symbol("INTERNAL_ROW");
export class SingleSelection {
    constructor(db, entity) {
        this.db = db;
        this.entity = entity;
    }
    get table() {
        return this.entity.table;
    }
    get id() {
        return this.entity.id;
    }
    get [ENTITY]() {
        return this.entity;
    }
    get [INTERNAL_ROW]() {
        return this.db.get(this.entity.table).get(this.entity.id);
    }
    select(...fields) {
        let row = this.db[FIND](this.entity);
        return row.select(fields);
    }
}
export class MultipleSelection {
    constructor(db, table, query = null) {
        this.db = db;
        this.table = table;
        this.query = query;
    }
    *[Symbol.iterator]() {
        let table = this.db.get(this.table);
        let entities;
        if (this.query === null) {
            entities = table.all();
        }
        else {
            entities = table[FILTER](this.query);
        }
        for (let entity of entities) {
            yield entity;
        }
    }
    where(query) {
        let normalized = normalize(query);
        if (this.query === null) {
            return new MultipleSelection(this.db, this.table, normalized);
        }
        else {
            return new MultipleSelection(this.db, this.table, Object.assign(Object.assign({}, this.query), normalized));
        }
    }
    count() {
        let count = 0;
        for (let _ of this) {
            count++;
        }
        return count;
    }
}
function normalize(query) {
    let out = Object.create(null);
    for (let key of Object.keys(query)) {
        out[key] = normalizeDataType(query[key]);
    }
    return out;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2VsZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQWlCLEVBQUUsSUFBSSxFQUFTLE1BQU0sWUFBWSxDQUFDO0FBQ25ELE9BQU8sRUFFTCxNQUFNLEVBRU4saUJBQWlCLEVBR2xCLE1BQU0sU0FBUyxDQUFDO0FBRWpCLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDdkMsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUVuRCxNQUFNLE9BQU8sZUFBZTtJQUUxQixZQUFvQixFQUFlLEVBQVUsTUFBaUI7UUFBMUMsT0FBRSxHQUFGLEVBQUUsQ0FBYTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVc7SUFBRyxDQUFDO0lBRWxFLElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDM0IsQ0FBQztJQUVELElBQUksRUFBRTtRQUNKLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVELElBQUksQ0FBQyxNQUFNLENBQUM7UUFDVixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUVELElBQUksQ0FBQyxZQUFZLENBQUM7UUFDaEIsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FHdkQsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLENBQWdDLEdBQUcsTUFBVztRQUNsRCxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVyQyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUEwQixDQUFDO0lBQ3JELENBQUM7Q0FDRjtBQU1ELE1BQU0sT0FBTyxpQkFBaUI7SUFFNUIsWUFDVSxFQUFlLEVBQ2YsS0FBUSxFQUNSLFFBQTRCLElBQUk7UUFGaEMsT0FBRSxHQUFGLEVBQUUsQ0FBYTtRQUNmLFVBQUssR0FBTCxLQUFLLENBQUc7UUFDUixVQUFLLEdBQUwsS0FBSyxDQUEyQjtJQUN2QyxDQUFDO0lBRUosQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDaEIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BDLElBQUksUUFBa0MsQ0FBQztRQUV2QyxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssSUFBSSxFQUFFO1lBQ3ZCLFFBQVEsR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7U0FDeEI7YUFBTTtZQUNMLFFBQVEsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3RDO1FBRUQsS0FBSyxJQUFJLE1BQU0sSUFBSSxRQUFRLEVBQUU7WUFDM0IsTUFBTSxNQUFNLENBQUM7U0FDZDtJQUNILENBQUM7SUFFRCxLQUFLLENBQUMsS0FBMkI7UUFDL0IsSUFBSSxVQUFVLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRWxDLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxJQUFJLEVBQUU7WUFDdkIsT0FBTyxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztTQUMvRDthQUFNO1lBQ0wsT0FBTyxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEtBQUssa0NBQzNDLElBQUksQ0FBQyxLQUFLLEdBQ1YsVUFBVSxFQUNiLENBQUM7U0FDSjtJQUNILENBQUM7SUFFRCxLQUFLO1FBQ0gsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBRWQsS0FBSyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7WUFDbEIsS0FBSyxFQUFFLENBQUM7U0FDVDtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztDQUNGO0FBRUQsU0FBUyxTQUFTLENBQ2hCLEtBQTJCO0lBRTNCLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFOUIsS0FBSyxJQUFJLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ2xDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxpQkFBaUIsQ0FBRSxLQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUNuRDtJQUVELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEYXRhYmFzZSwgeyBGSU5ELCBUeXBlcyB9IGZyb20gXCIuL2RhdGFiYXNlXCI7XG5pbXBvcnQge1xuICBFbnRpdHksXG4gIEZJTFRFUixcbiAgSW50ZXJuYWxSb3csXG4gIG5vcm1hbGl6ZURhdGFUeXBlLFxuICBQcmltYXJ5S2V5LFxuICBTcGVjaWZpZWRRdWVyeVxufSBmcm9tIFwiLi90YWJsZVwiO1xuXG5leHBvcnQgY29uc3QgRU5USVRZID0gU3ltYm9sKFwiRU5USVRZXCIpO1xuZXhwb3J0IGNvbnN0IElOVEVSTkFMX1JPVyA9IFN5bWJvbChcIklOVEVSTkFMX1JPV1wiKTtcblxuZXhwb3J0IGNsYXNzIFNpbmdsZVNlbGVjdGlvbjxUIGV4dGVuZHMgVHlwZXMsIE4gZXh0ZW5kcyBrZXlvZiBUICYgc3RyaW5nPlxuICBpbXBsZW1lbnRzIEVudGl0eTxOPiB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZGI6IERhdGFiYXNlPFQ+LCBwcml2YXRlIGVudGl0eTogRW50aXR5PE4+KSB7fVxuXG4gIGdldCB0YWJsZSgpOiBOIHtcbiAgICByZXR1cm4gdGhpcy5lbnRpdHkudGFibGU7XG4gIH1cblxuICBnZXQgaWQoKTogUHJpbWFyeUtleSB7XG4gICAgcmV0dXJuIHRoaXMuZW50aXR5LmlkO1xuICB9XG5cbiAgZ2V0IFtFTlRJVFldKCkge1xuICAgIHJldHVybiB0aGlzLmVudGl0eTtcbiAgfVxuXG4gIGdldCBbSU5URVJOQUxfUk9XXSgpOiBJbnRlcm5hbFJvdzxULCBOPiB7XG4gICAgcmV0dXJuIHRoaXMuZGIuZ2V0KHRoaXMuZW50aXR5LnRhYmxlKS5nZXQodGhpcy5lbnRpdHkuaWQpIGFzIEludGVybmFsUm93PFxuICAgICAgVCxcbiAgICAgIE5cbiAgICA+O1xuICB9XG5cbiAgc2VsZWN0PEsgZXh0ZW5kcyBrZXlvZiBUW05dICYgc3RyaW5nPiguLi5maWVsZHM6IEtbXSk6IHsgW1AgaW4gS106IFRbTl1bS10gfSB7XG4gICAgbGV0IHJvdyA9IHRoaXMuZGJbRklORF0odGhpcy5lbnRpdHkpO1xuXG4gICAgcmV0dXJuIHJvdy5zZWxlY3QoZmllbGRzKSBhcyB7IFtQIGluIEtdOiBUW05dW0tdIH07XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgUXVlcnk8VCBleHRlbmRzIFR5cGVzLCBOIGV4dGVuZHMga2V5b2YgVCAmIHN0cmluZz4gPSB7XG4gIFtQIGluIGtleW9mIFRbTl1dOiBUW05dW1BdO1xufTtcblxuZXhwb3J0IGNsYXNzIE11bHRpcGxlU2VsZWN0aW9uPFQgZXh0ZW5kcyBUeXBlcywgTiBleHRlbmRzIGtleW9mIFQgJiBzdHJpbmc+XG4gIGltcGxlbWVudHMgSXRlcmFibGU8RW50aXR5PE4+PiB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZGI6IERhdGFiYXNlPFQ+LFxuICAgIHByaXZhdGUgdGFibGU6IE4sXG4gICAgcHJpdmF0ZSBxdWVyeTogUXVlcnk8VCwgTj4gfCBudWxsID0gbnVsbFxuICApIHt9XG5cbiAgKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGxldCB0YWJsZSA9IHRoaXMuZGIuZ2V0KHRoaXMudGFibGUpO1xuICAgIGxldCBlbnRpdGllczogUmVhZG9ubHlBcnJheTxFbnRpdHk8Tj4+O1xuXG4gICAgaWYgKHRoaXMucXVlcnkgPT09IG51bGwpIHtcbiAgICAgIGVudGl0aWVzID0gdGFibGUuYWxsKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGl0aWVzID0gdGFibGVbRklMVEVSXSh0aGlzLnF1ZXJ5KTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBlbnRpdHkgb2YgZW50aXRpZXMpIHtcbiAgICAgIHlpZWxkIGVudGl0eTtcbiAgICB9XG4gIH1cblxuICB3aGVyZShxdWVyeTogU3BlY2lmaWVkUXVlcnk8VCwgTj4pOiBNdWx0aXBsZVNlbGVjdGlvbjxULCBOPiB7XG4gICAgbGV0IG5vcm1hbGl6ZWQgPSBub3JtYWxpemUocXVlcnkpO1xuXG4gICAgaWYgKHRoaXMucXVlcnkgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBuZXcgTXVsdGlwbGVTZWxlY3Rpb24odGhpcy5kYiwgdGhpcy50YWJsZSwgbm9ybWFsaXplZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgTXVsdGlwbGVTZWxlY3Rpb24odGhpcy5kYiwgdGhpcy50YWJsZSwge1xuICAgICAgICAuLi50aGlzLnF1ZXJ5LFxuICAgICAgICAuLi5ub3JtYWxpemVkXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBjb3VudCgpOiBudW1iZXIge1xuICAgIGxldCBjb3VudCA9IDA7XG5cbiAgICBmb3IgKGxldCBfIG9mIHRoaXMpIHtcbiAgICAgIGNvdW50Kys7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvdW50O1xuICB9XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZTxUIGV4dGVuZHMgVHlwZXMsIE4gZXh0ZW5kcyBrZXlvZiBUICYgc3RyaW5nPihcbiAgcXVlcnk6IFNwZWNpZmllZFF1ZXJ5PFQsIE4+XG4pOiBRdWVyeTxULCBOPiB7XG4gIGxldCBvdXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIGZvciAobGV0IGtleSBvZiBPYmplY3Qua2V5cyhxdWVyeSkpIHtcbiAgICBvdXRba2V5XSA9IG5vcm1hbGl6ZURhdGFUeXBlKChxdWVyeSBhcyBhbnkpW2tleV0pO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cbiJdfQ==