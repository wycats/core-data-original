var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { assert } from "./utils";
import { SingleSelection, ENTITY } from "./selection";
import { tracked } from "@glimmer/tracking";
import PrimaryKeyMap from "./primary-key-map";
export function isDataMatch(left, right) {
    if (isEntity(left) && isEntity(right)) {
        return left.table === right.table && isIdMatch(left.id, right.id);
    }
    else if (isEntity(left) || isEntity(right)) {
        return false;
    }
    else {
        return left === right;
    }
}
export function isIdMatch(left, right) {
    if (left.length !== right.length) {
        return false;
    }
    for (let i = 0; i < left.length; i++) {
        if (left[i] !== right[i]) {
            return false;
        }
    }
    return true;
}
export function isEntity(data) {
    return data !== null && typeof data === "object" && "table" in data;
}
export function normalizeDataType(data) {
    if (data instanceof SingleSelection) {
        return data[ENTITY];
    }
    else {
        return data;
    }
}
export class InternalRow {
    constructor(entity, columnNames, columns) {
        this.entity = entity;
        this.columnNames = columnNames;
        this.columns = columns;
    }
    static create(entity, row) {
        // TODO: Share column names
        let columnNames = Object.keys(row);
        let columns = Object.values(row).map(v => normalizeDataType(v));
        return new InternalRow(entity, columnNames, columns);
    }
    get id() {
        return this.entity.id;
    }
    update(updates) {
        for (let i = 0; i < this.columnNames.length; i++) {
            let columnName = this.columnNames[i];
            if (columnName in updates) {
                this.columns[i] = updates[columnName];
            }
        }
        // hack: invalidate columns
        this.columns = this.columns;
    }
    select(columns) {
        let out = Object.create(null);
        for (let column of columns) {
            out[column] = this.getColumn(column);
        }
        return out;
    }
    getColumn(name) {
        let index = this.columnIndex(name);
        return this.columns[index];
    }
    columnIndex(name) {
        let index = this.columnNames.indexOf(name);
        assert(index > -1, `You tried to match column ${name} in table ${this.entity.table} but it didn't exist (columns: ${this.columnNames.join(", ")})`);
        return index;
    }
    isMatch(query) {
        for (let key of Object.keys(query)) {
            let index = this.columnIndex(key);
            let pattern = query[key];
            let value = this.columns[index];
            if (!isDataMatch(pattern, value)) {
                return false;
            }
        }
        return true;
    }
}
__decorate([
    tracked
], InternalRow.prototype, "columns", void 0);
export const EMPTY = Symbol("EMPTY");
export const FILTER = Symbol("FILTER");
export const ADD_ROW = Symbol("ADD_ROW");
export const SCHEMA = Symbol("SCHEMA");
export default class Table {
    constructor(name, schema) {
        this.name = name;
        this.schema = schema;
        this.map = new PrimaryKeyMap();
    }
    get [SCHEMA]() {
        return this.schema;
    }
    [EMPTY]() {
        return new Table(this.name, this.schema);
    }
    [FILTER](query) {
        let out = [];
        for (let row of this.map.values()) {
            if (row.isMatch(query)) {
                out.push(row.entity);
            }
        }
        return out;
    }
    [ADD_ROW](row) {
        this.map.set(row.id, row);
        return {
            table: this.name,
            id: row.id
        };
    }
    all() {
        let out = [];
        for (let row of this.map.values()) {
            out.push({ table: this.name, id: row.id });
        }
        return out;
    }
    first() {
        for (let key of this.map.keys()) {
            return { table: this.name, id: key };
        }
        throw new Error(`Called first() on an empty database`);
    }
    get(id) {
        let row = this.map.get(id);
        assert(row, `Row not found (${id})`);
        return row;
    }
    add(row) {
        let userRow = InternalRow.create({ table: this.name, id: Array.isArray(row.id) ? row.id : [row.id] }, row);
        this[ADD_ROW](userRow);
        return userRow;
    }
}
//# sourceMappingURL=data:application/json;base64,