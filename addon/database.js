import { INTERNAL_ROW, MultipleSelection, SingleSelection } from "./selection";
import Table, { EMPTY, SCHEMA } from "./table";
import { expect } from "./utils";
export const FIND = Symbol("FIND");
export default class Database {
    constructor(tables) {
        this.tables = new Map();
        this.tables = tables;
    }
    static create() {
        return new Database(new Map());
    }
    define(name, schema) {
        this.tables.set(name, new Table(name, schema));
    }
    empty() {
        let tables = new Map();
        for (let [key, table] of this.tables) {
            tables.set(key, table[EMPTY]());
        }
        return new Database(tables);
    }
    [FIND](entity) {
        let table = this.get(entity.table);
        return table.get(entity.id);
    }
    first(name) {
        let table = this.get(name);
        return new SingleSelection(this, table.first());
    }
    all(name) {
        return new MultipleSelection(this, name);
    }
    find(nameOrEntity, id) {
        if (typeof nameOrEntity === "string") {
            this.get(nameOrEntity);
            return new SingleSelection(this, {
                table: nameOrEntity,
                id: [id]
            });
        }
        else {
            this.get(nameOrEntity.table);
            return new SingleSelection(this, {
                table: nameOrEntity.table,
                id: nameOrEntity.id
            });
        }
    }
    get(name) {
        let table = this.tables.get(name);
        expect(table, `Unexpected table name ${name}`);
        return table;
    }
    update(entity, updates) {
        let row = this.find(entity);
        row[INTERNAL_ROW].update(updates);
    }
    populate(name, data, amount) {
        let table = this.get(name);
        let schema = table[SCHEMA];
        let out = [];
        for (let i = 0; i < amount; i++) {
            out.push(table.add(fake(data, schema)).entity);
        }
        return out;
    }
}
let ID = 1;
function fake(data, schema) {
    let out = Object.create(null);
    for (let key of Object.keys(data)) {
        out[key] = data[key]();
    }
    let idColumns = schema.id.columns;
    if ("id" in data) {
        out.id = idColumns.map(column => out[column]);
    }
    else {
        out.id = [`${ID++}`];
    }
    return out;
}
//# sourceMappingURL=data:application/json;base64,